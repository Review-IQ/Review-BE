name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20.x'

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./src

    - name: Build
      run: dotnet build --no-restore --configuration Release
      working-directory: ./src

    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal
      working-directory: ./src

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./client/package-lock.json

    - name: Install dependencies
      run: npm ci
      working-directory: ./client

    - name: Run linter
      run: npm run lint
      working-directory: ./client

    - name: Build
      run: npm run build
      working-directory: ./client
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_AUTH0_DOMAIN: ${{ secrets.VITE_AUTH0_DOMAIN }}
        VITE_AUTH0_CLIENT_ID: ${{ secrets.VITE_AUTH0_CLIENT_ID }}
        VITE_AUTH0_AUDIENCE: ${{ secrets.VITE_AUTH0_AUDIENCE }}

  # Deploy to Production (only on main branch)
  deploy-production:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push API image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.api
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/reviewhub-api:latest

    - name: Build and push Client image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.client
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/reviewhub-client:latest
        build-args: |
          VITE_API_URL=${{ secrets.VITE_API_URL }}
          VITE_AUTH0_DOMAIN=${{ secrets.VITE_AUTH0_DOMAIN }}
          VITE_AUTH0_CLIENT_ID=${{ secrets.VITE_AUTH0_CLIENT_ID }}
          VITE_AUTH0_AUDIENCE=${{ secrets.VITE_AUTH0_AUDIENCE }}

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/reviewhub
          git pull origin main
          chmod +x deploy.sh
          ./deploy.sh

  # Deploy to Staging (only on develop branch)
  deploy-staging:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push API image (staging)
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.api
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/reviewhub-api:staging

    - name: Build and push Client image (staging)
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.client
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/reviewhub-client:staging
        build-args: |
          VITE_API_URL=${{ secrets.STAGING_API_URL }}
          VITE_AUTH0_DOMAIN=${{ secrets.VITE_AUTH0_DOMAIN }}
          VITE_AUTH0_CLIENT_ID=${{ secrets.VITE_AUTH0_CLIENT_ID }}
          VITE_AUTH0_AUDIENCE=${{ secrets.VITE_AUTH0_AUDIENCE }}

    - name: Deploy to staging server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/reviewhub-staging
          git pull origin develop
          chmod +x deploy.sh
          ./deploy.sh
